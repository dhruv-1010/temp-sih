<!DOCTYPE html>
<html>
    <head>
        <title>directionscreatedrivingrouteHTML</title>
		
        <meta http-equiv='Content-Type' content='text/html; charset=utf-8'/>
    <link rel="stylesheet" href="/css/dash.css">
		<style type='text/css'>
			
			  #everything{
				box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;
				padding:20px;
			  }
			  .vertical-list {
				position: relative; /* Add relative positioning to the parent container */
			  }
			  .vertical-list .additional-info {
				display: none;
			  }
			  
			  ul {
				position: absolute;
				left: 10%;
			  }
			  
			  .vertical-list li {
				margin: 0;
				padding: 5px 0;
				position: relative;
				 /* Remove default list bullet */
			  }
			  
			  /* Create the vertical line connecting list items */
			  .vertical-list li::before {
				content: "";
				position: absolute;
				top: 15px; /* Adjust the position of the line as needed */
				left: -14px; /* Adjust the position of the line as needed */
				width: 2px; /* Adjust the width of the line as needed */
				bottom: -15px; /* Adjust the bottom position of the line as needed */
				background-color: #000; /* Adjust the color of the line as needed */
			  }
			  
			  /* Add circles at the beginning and end of the vertical line */
			 
			  
			  .vertical-list li:last-child::after {
				top: calc(100% - 10px); /* Adjust the position of the bottom circle */
			  }
			  
		#main{
			display:grid;
			grid-template-columns:repeat(2,1fr);
		}
		/* Reset some default styles and set up the overall layout */
body {
  margin: 0;
  padding: 0;
  overflow: scroll;
  font-family: 'Segoe UI', Helvetica, Arial, Sans-Serif;
  background-color: #f5f5f5; /* Change this to your preferred background color */
}

/* Navigation bar styles */
nav {
  background-color: red; /* Set the navigation bar background color to red */
  color: white; /* Set the text color to white */
  display: flex;
  justify-content: space-between;
  padding: 10px 20px;
}

.nav__logo a {
  text-decoration: none;
  color: white; /* Set the logo text color to white */
  font-weight: bold;
  font-size: 1.5rem;
}

.nav__links {
  list-style: none;
  display: flex;
  gap: 20px;
  margin: 0;
  padding: 0;
}

.link a {
  text-decoration: none;
  color: white; /* Set link text color to white */
  font-weight: bold;
  font-size: 1rem;
}

/* Container styles */
#main {
  display: grid;
  grid-template-rows: 1fr 2fr; /* Adjust the column sizes as needed */
}

#box {
  padding: 20px;
  background-color: white; /* Set the background color of the box */
}

/* Map styles */
#myMap {
  height: 80vh; /* Set the map height to 80% of the container */
  width: 100%;
}

/* Additional styles can be added as needed */

		
		</style>
    </head>
    <body>
	<nav style="color:black;">
        <div class="nav__logo"style="color:black;"><a href="#">FindRide</a></div>
        <ul class="nav__links">
          <li class="link"><a href="#home">Home</a></li>
          <li class="link"><a href="#trending">Login</a></li>
          <li class="link"><a href="#destination">Destinations</a></li>
        </ul>
      </nav>
	  <nav class="sidebar close">
        <header>
            <div class="image-text">
                <span class="image">
                    <img src="/img/image (1).jpeg" alt="">
                </span>
                </div>
            </div>
        </header>
        <div class="menu-bar">
            <div class="menu">
                <ul class="menu-links">
                    <li class="nav-link">
                        <a href="#">
                            <i class='bx bx-bell icon'></i>
                            <span class="text nav-text">Notification</span>
                        </a>
                    </li>
                    <li class="nav-link">
                        <a href="#">
                            <i class='bx bx-home icon'></i>
                            <span class="text nav-text"><%=obj.BusNo%></span>
                        </a>
                    </li>
                    <li class="nav-link">
                        <a href="#">
                            <i class='bx bx-home icon'></i>
                            <span class="text nav-text"><%=obj.DriverName%></span>
                        </a>
                    </li>
                    <li class="nav-link">
                            <i class='bx bx-log-out-circle icon'></i>
                            <span class="text nav-text">Logout</span>
                        </a>
                    </li>
                </ul>
				<i class='bx bx-chevron-right toggle'></i>

            </div>
        </div>
	</nav>
	<div id="main">
		<div id ="box">
		
		<div id="info"></div>
		
			<div id="everything" class="vertical-list"></div>
		

		
		</div>
        <div id='myMap' style="height:100vh;"></div>
		 <script src="/socket.io/socket.io.js"></script>

        <script type='text/javascript'>
			// navbar JavaScript
const navBar = document.querySelector('.toggle');
const main = document.querySelector('.sidebar');
const text = document.querySelectorAll('.nav-text');
// JavaScript to toggle the sidebar width and content margin
const content = document.querySelector('.content');


navBar.addEventListener('click', () => {
   main.classList.toggle('open'); // Toggle the "open" class for sidebar
    content.classList.toggle('open'); 
    // Toggle the visibility of nav-text elements
});

  
            function loadMapScenario() {
               var map = new Microsoft.Maps.Map(document.getElementById('myMap'), {
			center: new Microsoft.Maps.Location(27.1767, 78.008072),
			zoom: 12
			});

			Microsoft.Maps.loadModule('Microsoft.Maps.Directions', function () {
			var directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
			directionsManager.setRequestOptions({ routeMode: Microsoft.Maps.Directions.RouteMode.driving });
			const object = <%-JSON.stringify(obj.busStops) %>;
			var waypoints = [];
			for(let waypoint of object){
				waypoints.push(new Microsoft.Maps.Directions.Waypoint({
				address: waypoint.address,
				location: new Microsoft.Maps.Location(waypoint.coOrdinates.longitude, waypoint.coOrdinates.latitude)
			}));
			}
			console.log(waypoints);
			for (var i = 0; i < waypoints.length; i++) {
				directionsManager.addWaypoint(waypoints[i]);
			}
			directionsManager.calculateDirections();
		const obj = <%- JSON.stringify(obj) %>
						const BusNo = obj.BusNo;

				const socket = io();
				socket.emit('subscribeToBus', BusNo);
						  
				// Store the bus location pushpin separately
				var busPushpin = null;

				// Listen for bus location updates from the server
				socket.on('busLocationUpdate', (data) => {
				  console.log('location update AYI BHAI');

				  // Assuming 'data' contains BusNo, latitude, and longitude
				  
				  const { BusNo, latitude, longitude,speed,timestamp} = data;
				  const info=document.getElementById("info");
				  // calculation the distance
				  const distances = [];

				  // Iterate through each bus stop
				  obj.busStops.forEach(busStop => {
					// Calculate the distance for each bus stop
					const dist = calculateDistance(latitude,longitude,busStop.coOrdinates.longitude, busStop.coOrdinates.latitude);
const currentTimestamp = new Date();

// Get the current time as a formatted string (HH:mm:ss)
const currentTime = currentTimestamp.toLocaleTimeString();
const time = currentTime; // Current time
const durationInHours = dist / 5;

const hours = Math.floor(durationInHours);
const minutes = Math.floor((durationInHours - hours) * 60);
const seconds = Math.floor(((durationInHours - hours) * 60 - minutes) * 60);

// Create a formatted string
const formattedDuration = `${hours} hours ${minutes} minutes ${seconds} seconds`;
 // Duration based on distance and speed

// Add the result to the distances array
distances.push({
  address: busStop.address,
  distance: dist.toFixed(2) + ' km',
  speed: speed,

  duration: formattedDuration // Convert duration to hours (or desired units)
});
				  });
				  
				  function calculateDistance(lat1, lon1, lat2, lon2) {
					const earthRadiusKm = 6371; // Radius of the Earth in kilometers
				
					// Convert latitude and longitude from degrees to radians
					const lat1Rad = (lat1 * Math.PI) / 180;
					const lon1Rad = (lon1 * Math.PI) / 180;
					const lat2Rad = (lat2 * Math.PI) / 180;
					const lon2Rad = (lon2 * Math.PI) / 180;
				
					// Calculate the differences between the latitudes and longitudes
					const latDiff = lat2Rad - lat1Rad;
					const lonDiff = lon2Rad - lon1Rad;

					// Calculate the Haversine distance
					const a =
					  Math.sin(latDiff / 2) ** 2 +
					  Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(lonDiff / 2) ** 2;
					const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
					const distance = earthRadiusKm * c;
				
					return distance; // Distance in kilometers
				  }

				
				  


				  info.innerHTML = `The Bus is currently running at Speed: ${speed}`;
				  const everything = document.getElementById("everything");

				  // Create an HTML list to display the distances
				  const list = document.createElement("ul");
				  list.classList.add("vertical-list");
				  
				  // Iterate through the distances array and create list items
				  everything.innerHTML = '';
				  distances.forEach(result => {
					const listItem = document.createElement("li");
					listItem.innerHTML = `${result.address}`;
				  
					// Create a <div> element for additional information
					const additionalInfo = document.createElement("div");
					additionalInfo.classList.add("additional-info");
					additionalInfo.innerHTML = `Time taken: ${result.duration}<br>Distance: ${result.distance}`;
				  
					// Append the additional info <div> to the list item
					listItem.appendChild(additionalInfo);
				  
					// Append each list item to the list
					list.appendChild(listItem);
				  });
				  
				  // Set the list as the innerHTML of the "everything" element
				  everything.appendChild(list);
				  const listItems = document.querySelectorAll('.vertical-list li');

// Add click event listeners to each list item
listItems.forEach((item) => {
  item.addEventListener('click', () => {
    // Toggle the display of the additional info
    const additionalInfo = item.querySelector('.additional-info');
    if (additionalInfo.style.display === 'block') {
      additionalInfo.style.display = 'none';
    } else {
      additionalInfo.style.display = 'block';
    }
  });
});
				  
				  
				  distances.forEach(result => {
					console.log('Address: ' + result.address);
					console.log('Distance: ' + result.distance);
					console.log('Speed: ' + result.speed);
				
					console.log('Duration: ' + result.duration);
				  });
				  
				  

				  // Create a pushpin on the map to represent the bus's location
				  var busLocation = new Microsoft.Maps.Location(latitude, longitude);
				  var pushpin = new Microsoft.Maps.Pushpin(busLocation, {
					color: 'green', // Set pushpin color to orange
					anchor: new Microsoft.Maps.Point(12, 24), // Adjust the anchor point for proper placement
					visible: true, // Ensure the pushpin is visible
					width: 100, // Set the width of the pushpin
					height: 100, // Set the height of the pushpin
				  });

				  // Clear the previous bus pushpin (if exists)
				  if (busPushpin) {
					map.entities.remove(busPushpin);
				  }

				  // Add the new bus pushpin to the map
				  map.entities.push(pushpin);

				  // Update the busPushpin reference
				  busPushpin = pushpin;
				})
			});
			

		  }
		         // Get all list items


        </script>
        <script type='text/javascript' src='https://www.bing.com/api/maps/mapcontrol?key=AgR0x_K2TMMF0_KRIeZLiaXmJqlK8pR17S7fBdxlhNhwZYtWRZbPz8YZmt_H5sjh&callback=loadMapScenario' async defer></script>
    </body>
</html>